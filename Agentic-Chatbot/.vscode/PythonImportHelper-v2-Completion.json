[
    {
        "label": "StateGraph",
        "importPath": "langgraph.graph",
        "description": "langgraph.graph",
        "isExtraImport": true,
        "detail": "langgraph.graph",
        "documentation": {}
    },
    {
        "label": "START",
        "importPath": "langgraph.graph",
        "description": "langgraph.graph",
        "isExtraImport": true,
        "detail": "langgraph.graph",
        "documentation": {}
    },
    {
        "label": "END",
        "importPath": "langgraph.graph",
        "description": "langgraph.graph",
        "isExtraImport": true,
        "detail": "langgraph.graph",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "src.langgraph.state.state",
        "description": "src.langgraph.state.state",
        "isExtraImport": true,
        "detail": "src.langgraph.state.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "src.langgraph.state.state",
        "description": "src.langgraph.state.state",
        "isExtraImport": true,
        "detail": "src.langgraph.state.state",
        "documentation": {}
    },
    {
        "label": "BasicChatbotNode",
        "importPath": "src.langgraph.nodes.basic_chatbot_node",
        "description": "src.langgraph.nodes.basic_chatbot_node",
        "isExtraImport": true,
        "detail": "src.langgraph.nodes.basic_chatbot_node",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "streamlit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "streamlit",
        "description": "streamlit",
        "detail": "streamlit",
        "documentation": {}
    },
    {
        "label": "ChatGroq",
        "importPath": "langchain_groq",
        "description": "langchain_groq",
        "isExtraImport": true,
        "detail": "langchain_groq",
        "documentation": {}
    },
    {
        "label": "TypedDict",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing_extensions",
        "description": "typing_extensions",
        "isExtraImport": true,
        "detail": "typing_extensions",
        "documentation": {}
    },
    {
        "label": "add_message",
        "importPath": "langgraph.graph.message",
        "description": "langgraph.graph.message",
        "isExtraImport": true,
        "detail": "langgraph.graph.message",
        "documentation": {}
    },
    {
        "label": "Annotated",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "HumanMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "AIMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "ToolMessage",
        "importPath": "langchain_core.messages",
        "description": "langchain_core.messages",
        "isExtraImport": true,
        "detail": "langchain_core.messages",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Config",
        "importPath": "src.langgraph.ui.uiconfigfile",
        "description": "src.langgraph.ui.uiconfigfile",
        "isExtraImport": true,
        "detail": "src.langgraph.ui.uiconfigfile",
        "documentation": {}
    },
    {
        "label": "ConfigParser",
        "importPath": "configparser",
        "description": "configparser",
        "isExtraImport": true,
        "detail": "configparser",
        "documentation": {}
    },
    {
        "label": "LoadStreamlitUI",
        "importPath": "src.langgraph.ui.streamlitui.loadui",
        "description": "src.langgraph.ui.streamlitui.loadui",
        "isExtraImport": true,
        "detail": "src.langgraph.ui.streamlitui.loadui",
        "documentation": {}
    },
    {
        "label": "GroqLLM",
        "importPath": "src.langgraph.llm.groqllm",
        "description": "src.langgraph.llm.groqllm",
        "isExtraImport": true,
        "detail": "src.langgraph.llm.groqllm",
        "documentation": {}
    },
    {
        "label": "GraphBuilder",
        "importPath": "src.langgraph.graph.graph_builder",
        "description": "src.langgraph.graph.graph_builder",
        "isExtraImport": true,
        "detail": "src.langgraph.graph.graph_builder",
        "documentation": {}
    },
    {
        "label": "DisplayResultStreamlit",
        "importPath": "src.langgraph.ui.streamlitui.display_result",
        "description": "src.langgraph.ui.streamlitui.display_result",
        "isExtraImport": true,
        "detail": "src.langgraph.ui.streamlitui.display_result",
        "documentation": {}
    },
    {
        "label": "load_langgraph_agenticai_app",
        "importPath": "src.langgraph.main",
        "description": "src.langgraph.main",
        "isExtraImport": true,
        "detail": "src.langgraph.main",
        "documentation": {}
    },
    {
        "label": "GraphBuilder",
        "kind": 6,
        "importPath": "src.langgraph.graph.graph_builder",
        "description": "src.langgraph.graph.graph_builder",
        "peekOfCode": "class GraphBuilder:\n    def __init__(self,model):\n        self.llm=model\n        self.graph_builder=StateGraph(State)\n    def basic_chatbot(self):\n        \"\"\"\"\n        basic chatbot graph\n        \"\"\"\n        self.basic_chatbot_node=BasicChatbotNode(self.llm)\n        self.graph_builder.add_node(\"chatbot\",self.basic_chatbot_node.process)",
        "detail": "src.langgraph.graph.graph_builder",
        "documentation": {}
    },
    {
        "label": "GroqLLM",
        "kind": 6,
        "importPath": "src.langgraph.llm.groqllm",
        "description": "src.langgraph.llm.groqllm",
        "peekOfCode": "class GroqLLM:\n    def __init__(self,user_contols_input):\n        self.user_controls_input=user_contols_input\n    def get_llm_model(self):\n        try:\n            groq_api_key=self.user_controls_input[\"GROQ_API_KEY\"]\n            selected_groq_model=self.user_controls_input[\"selected_groq_model\"]\n            if groq_api_key=='' and os.environ[\"GROQ_API_KEY\"] =='':\n                st.error(\"Please Enter the Groq API KEY\")\n            llm=ChatGroq(api_key=groq_api_key,model=selected_groq_model)",
        "detail": "src.langgraph.llm.groqllm",
        "documentation": {}
    },
    {
        "label": "BasicChatbotNode",
        "kind": 6,
        "importPath": "src.langgraph.nodes.basic_chatbot_node",
        "description": "src.langgraph.nodes.basic_chatbot_node",
        "peekOfCode": "class BasicChatbotNode:\n    \"\"\"\n    Basic Chatbot login implementation\n    \"\"\"\n    def __init__(self,model):\n        self.llm=model\n    def process(self,state:State)->dict:\n        \"\"\"\n        Processes the input state and generates a chatbot response.\n        \"\"\"",
        "detail": "src.langgraph.nodes.basic_chatbot_node",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "src.langgraph.state.state",
        "description": "src.langgraph.state.state",
        "peekOfCode": "class State(TypedDict):\n    \"\"\"\n    Represents the structure of state used in the graph.\n    \"\"\"\n    message:Annotated[list,add_message]",
        "detail": "src.langgraph.state.state",
        "documentation": {}
    },
    {
        "label": "DisplayResultStreamlit",
        "kind": 6,
        "importPath": "src.langgraph.ui.streamlitui.display_result",
        "description": "src.langgraph.ui.streamlitui.display_result",
        "peekOfCode": "class DisplayResultStreamlit:\n    def __init__(self,usecase,graph,user_message):\n        self.usecase= usecase\n        self.graph = graph\n        self.user_message = user_message\n    def display_result_on_ui(self):\n        usecase= self.usecase\n        graph = self.graph\n        user_message = self.user_message\n        print(user_message)",
        "detail": "src.langgraph.ui.streamlitui.display_result",
        "documentation": {}
    },
    {
        "label": "LoadStreamlitUI",
        "kind": 6,
        "importPath": "src.langgraph.ui.streamlitui.loadui",
        "description": "src.langgraph.ui.streamlitui.loadui",
        "peekOfCode": "class LoadStreamlitUI:\n    def __init__(self):\n        self.config=Config()\n        self.user_controls={}\n    def load_streamlit_ui(self):\n        st.set_page_config(page_title= \"ðŸ¤– \" + self.config.get_page_title(), layout=\"wide\")\n        st.header(\"ðŸ¤– \" + self.config.get_page_title())\n        with st.sidebar:\n            # Get options from config\n            llm_options = self.config.get_llm_options()",
        "detail": "src.langgraph.ui.streamlitui.loadui",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "src.langgraph.ui.uiconfigfile",
        "description": "src.langgraph.ui.uiconfigfile",
        "peekOfCode": "class Config:\n    def __init__(self,config_file=\"./src/langgraphagenticai/ui/uiconfigfile.ini\"):\n        self.config=ConfigParser()\n        self.config.read(config_file)\n    def get_llm_options(self):\n        return self.config[\"DEFAULT\"].get(\"LLM_OPTIONS\").split(\", \")\n    def get_usecase_options(self):\n        return self.config[\"DEFAULT\"].get(\"USECASE_OPTIONS\").split(\", \")\n    def get_groq_model_options(self):\n        return self.config[\"DEFAULT\"].get(\"GROQ_MODEL_OPTIONS\").split(\", \")",
        "detail": "src.langgraph.ui.uiconfigfile",
        "documentation": {}
    },
    {
        "label": "load_langgraph_agenticai_app",
        "kind": 2,
        "importPath": "src.langgraph.main",
        "description": "src.langgraph.main",
        "peekOfCode": "def load_langgraph_agenticai_app():\n    \"\"\"\n    Loads and runs the LangGraph AgenticAI application with Streamlit UI.\n    This function initializes the UI, handles user input, configures the LLM model,\n    sets up the graph based on the selected use case, and displays the output while \n    implementing exception handling for robustness.\n    \"\"\"\n    ##Load UI\n    ui=LoadStreamlitUI()\n    user_input=ui.load_streamlit_ui()",
        "detail": "src.langgraph.main",
        "documentation": {}
    }
]